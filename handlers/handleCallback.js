import { Markup } from 'telegraf'
import { getUser, getUserById, save as saveUsers } from '../data/users'
import { getChat, getChatById, save as saveChats } from '../data/chats'
import { getMember, isAdmin } from '../utils/chats'
import { handleTrainerCallback } from '../handlers/trainer'

/* –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã –≤ —á–∞—Ç */
const handleEssayCancel = async (ctx) => {
    const user = await getUser(ctx)
    if (!user) return;
    if (!user.state) return await ctx.deleteMessage()

    user.state = null
    saveUsers()
    await ctx.editMessageText(`‚úî <b>–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!</b>`, { parse_mode: 'HTML' })
}

/* –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–∫–µ—Ç—É */
const handleEssayVoting = async (ctx, args) => {
    const chatId = +args[1]
    if (chatId !== ctx.chat.id) return await ctx.answerCbQuery("‚ùå –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ!")
    if (!await getMember(ctx, chatId)) return await ctx.answerCbQuery("‚ùå –í—ã - –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞!")
    
    const vote = +args[4]
    if (vote !== 0 && vote !== 1) return;
    
    /* TODO —Ä–µ–π—Ç –ª–∏–º–∏—Ç—ã */
    const chat = await getChatById(chatId)
    if (!chat) return;
    const essay = chat.essays?.[+args[3]]
    if (!essay) return;
    
    const voted = Object.entries(essay.votes).find(([ id, _ ]) => +id === +ctx.from.id)
    console.log(voted)
    if (vote === voted?.[1]) return await ctx.answerCbQuery("–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!")
    /* TODO –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —é–∑–µ—Ä–∞ –≤ —Å–ª—É—á–∞–µ Exception */
    essay.votes[ctx.from.id] = args[4] === '1' ? 1 : 0
    
    saveChats() /* –Ω–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –∑–∞–º–µ–¥–ª—è–µ–º –æ—Ç–∫–ª–∏–∫ */
    
    const values = Object.values(essay.votes)
    const up = values.filter(x => x === 1).length
    const down = values.filter(x => x === 0).length
    
    const keyboard = Markup.inlineKeyboard([
        [ Markup.button.callback(`‚úÖ –ó–∞ | ${up}`, `vote ${args[1]} essay ${args[3]} 1 ${Math.random()}`),
        Markup.button.callback(`‚ùå –ü—Ä–æ—Ç–∏–≤ | ${down}`, `vote ${args[1]} essay ${args[3]} 0 ${Math.random()}`) ],
    ])
    
    const messageId = ctx.callbackQuery.message.message_id;
    await ctx.editMessageReplyMarkup(keyboard.reply_markup)
}

/* TODO –û–ß–ï–ù–¨ –í–ê–ñ–ù–û */
/* —Å–¥–µ–ª–∞—Ç—å escapeHtml –¥–ª—è —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ —Å <> –∏ —Ç.–¥. */

/* –†–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ø–æ –∞–Ω–∫–µ—Ç–µ */
const handleEssayVerdict = async (ctx, args) => {
    const [ _, chatId, essayId, action ] = args;
    if (!await isAdmin(ctx, +chatId)) return await ctx.answerCbQuery("‚ùå –í—ã - –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    
    //if (!/^(accept|decline|silent)$/.test(action)) return;
    
    const user = await getUser(ctx)
    if (!user) return await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ 501")
    
    /* TODO —Ä–µ–π—Ç –ª–∏–º–∏—Ç—ã */
    const chat = await getChatById(chatId)
    if (!chat) return;
    const essay = chat.essays?.[essayId]
    if (!essay) return;
    if (essay.state % 2 === 1) {
        if (user.state && user.state.type === 'decline') delete user['state']
        if (!essay.admin) return await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ 500")
        return await ctx.answerCbQuery("‚ùå –ê–Ω–∫–µ—Ç–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ " + essay.admin.first_name)
    }
    
    if (action === 'decline') {
        essay.state = 2
        
        user.state = { type: 'decline', chatId: +chatId, essayId }
        
        const keyboard = Markup.inlineKeyboard([
            [ Markup.button.callback('‚ùå –ú–æ–ª—á–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å', `essay ${chatId} ${essayId} silent`) ],
        ])
        
        await ctx.reply(`‚ö† –û–∫–µ–π! –°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥–∏—Ç –ø–æ–¥–∞–≤—à–∏–π –∞–Ω–∫–µ—Ç—É (–∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å–∞—Ç—å)\n\n<b>–í–∞–∂–Ω–æ:</b> –µ—Å–ª–∏ –≤—ã –º–æ–ª—á–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–≤—Ç–æ—Ä–Ω–æ.`, { ...keyboard, parse_mode: 'HTML' })
    }
    else if (action === 'silent') {
        delete user['state']
        essay.state = 3
        essay.admin = ctx.from
        
        const text = `‚ùå <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>\n–ê–¥–º–∏–Ω –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ :(`
        await ctx.telegram.sendMessage(essay.from.id, text, { parse_mode: 'HTML' })
        
        await ctx.reply(`‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>`, { parse_mode: 'HTML' })
    }
    else if (action === 'fin_dec') {
        if (!user.state === 2) return await ctx.deleteMessage();
        const block = args[4] === 'block';
        
        if (!block) {
            const receiver = await getUserById(essay.from.id)
            receiver.limits.essays.splice(receiver.limits.essays.indexOf(+chat.id))
        }
        
        const reason = user.state.canc_reason
        
        delete user['state']
        essay.state = 3
        essay.admin = ctx.from
        
        saveChats()
        
        const text = block ? `‚ùå <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!</b>\n–ê–¥–º–∏–Ω –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n${reason}` : `‚ö† <b>–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ!</b>\n–ê–¥–º–∏–Ω –æ—Å—Ç–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n${reason}\n\n<i>–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∞–Ω–∫–µ—Ç—É, –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ</i>`
        await ctx.telegram.sendMessage(essay.from.id, text, { parse_mode: 'HTML' })
        
        await ctx.reply(`‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n${essay.from.first_name} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.`, { parse_mode: 'HTML' })
    }
    else if (action === 'accept') {
        let inviteLink;
        try {
            const response = await ctx.telegram.createChatInviteLink(chat.id, {
                name: '–ü—Ä–∏–Ω—è—Ç–æ ' + ctx.from.first_name,
                creates_join_request: true,
            })
            inviteLink = response.invite_link
        } catch (e) {
            console.error(e)
            return await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç!`)
        }
        
        essay.state = 1
        essay.admin = ctx.from
        
        /* –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–∞–π—Ç, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞—è–≤–∫—É */
        if (!chat.invited) chat.invited = {}
        chat.invited[inviteLink] = { userId: essay.from.id }
        saveChats()
        
        const text = `‚úÖ <b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>\n<a href="${inviteLink}">–í—Å—Ç—É–ø–∞–π—Ç–µ —Å–∫–æ—Ä–µ–µ! <b>(–∫–ª–∏–∫)</b></a>`
        await ctx.telegram.sendMessage(essay.from.id, text, { parse_mode: 'HTML' })
        
        await ctx.reply(`‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n${essay.from.first_name} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —á–∞—Ç.\n\n‚ö† –í–∞–∂–Ω–æ: –µ—Å–ª–∏ ${essay.from.first_name} –Ω–µ –≤—Å—Ç—É–ø–∏—Ç –≤ —á–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π`, { parse_mode: 'HTML' })
    }
    else if (action === 'cancel') {
        essay.state = 0
        delete user['state']
        ctx.deleteMessage();
        await ctx.reply(`üîô <b>–û—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–∫–µ—Ç—É –æ—Ç–º–µ–Ω–µ–Ω!</b>`, { parse_mode: 'HTML' })
    }
}


export default async function handleCallback(ctx) {
    const query = ctx.callbackQuery?.['data']
    
    const args = query.split(' ')
    if (query === 'cancel essay') await handleEssayCancel(ctx)
    else if (args[0] === 'vote' && args[2] === 'essay') await handleEssayVoting(ctx, args)
    else if (args[0] === 'essay') await handleEssayVerdict(ctx, args)
    else if (args[0] === 'trainer') await handleTrainerCallback(ctx, args)
}



