import { Markup } from 'telegraf'
import os from 'node:os'

const getCpuUsage = () => {
    try {
        const cpus = os.cpus();
        const cpu = cpus[0];
        
        const total = Object.values(cpu.times).reduce(
            (acc, tv) => acc + tv, 0
        );
        
        const usage = process.cpuUsage();
        const currentCPUUsage = (usage.user + usage.system) / 1000;
        
        return currentCPUUsage / total * 100;
    } catch (e) {
        console.error(e)
        return NaN
    }
}

async function askOllama(prompt, model = "gpt-oss:latest") {
    const res = await fetch("http://localhost:11434/api/generate", {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            model,
            prompt,
            stream: false,
        }),
    });

    if (!res.ok) {
        throw new Error(`Ollama error: ${res.statusText}`);
    }

    const data = await res.json();
    return data.response;
}

const phrasesText = () => {
    return `You are a Spanish language learning assistant. Create ten phrases and word combinations related to the topic: "Study, school." Your interlocutor speaks Spanish at level B1 on the CERF scale. He is a russian. Always provide your answer in JSON, do not format:
{"phrases":[{"phrase":"Hola, gracias","translation":"–ü—Ä–∏–≤–µ—Ç, —Å–ø–∞—Å–∏–±–æ"},{"phrase":"Donde esta la escuela?","translation":"–ì–¥–µ —à–∫–æ–ª–∞?"}]}`
}

const cardsText = () => {
    return `You are a Spanish language learning assistant. Write 15 words on topics "Study, school" The person you're speaking to knows Spanish at level B1 on the CERF scale. He is a russian. Always provide your answer in JSON, do not format:
{"phrases":[{"phrase":"Hola, gracias","translation":"–ü—Ä–∏–≤–µ—Ç, —Å–ø–∞—Å–∏–±–æ"},{"phrase":"Donde esta la escuela?","translation":"–ì–¥–µ —à–∫–æ–ª–∞?"}]}`
}

const cardsText = () => {
    return `You are a Spanish language learning assistant. Write 15 words on topics "Study, school" The person you're speaking to knows Spanish at level B1 on the CERF scale. He is a russian. Always provide your answer in JSON, do not format:
{"phrases":[{"phrase":"Hola, gracias","translation":"–ü—Ä–∏–≤–µ—Ç, —Å–ø–∞—Å–∏–±–æ"},{"phrase":"Donde esta la escuela?","translation":"–ì–¥–µ —à–∫–æ–ª–∞?"}]}`
}

const topics = {
    es: {
        a2: {
            words: [
                "–°–µ–º—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏", "–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞", "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∂–∏–∑–Ω—å: —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫, –±—ã—Ç", "–î–æ–º, –∂–∏–ª—å—ë (–∫–æ–º–Ω–∞—Ç—ã, –º–µ–±–µ–ª—å)", "–†–∞–±–æ—Ç–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", "–£—á—ë–±–∞, —à–∫–æ–ª–∞", "–ü–æ–∫—É–ø–∫–∏, –º–∞–≥–∞–∑–∏–Ω—ã", "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", "–•–æ–±–±–∏, —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, —Å–ø–æ—Ä—Ç", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≥–æ—Ä–æ–¥–µ", "–ó–¥–æ—Ä–æ–≤—å–µ, –±–æ–ª–µ–∑–Ω–∏, –ø–æ—Å–µ—â–µ–Ω–∏–µ –¥–æ–∫—Ç–æ—Ä–∞", "–ü–æ–≥–æ–¥–∞, –≤—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞", "–û–¥–µ–∂–¥–∞, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã", "–û—Ç–¥—ã—Ö, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø—Ä–∞–∑–¥–Ω–∏–∫–∏", "–í—Ä–µ–º—è, –¥–∞—Ç–∞, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç, –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã, –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, –ø—Ä–æ—Å—å–±—ã, –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π", "–í—ã—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π, —á—É–≤—Å—Ç–≤, –º–Ω–µ–Ω–∏–π"
            ],
            grammar: [
                "–ù–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è (Presente) ‚Äî —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∏ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã", "–†–æ–¥ –∏ —á–∏—Å–ª–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö; —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏", "–ê—Ä—Ç–∏–∫–ª–∏ (–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π, –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π, –Ω—É–ª–µ–≤–æ–π)", "–õ–∏—á–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è (yo, t√∫, √©l ‚Ä¶)", "–í–æ–∑–≤—Ä–∞—Ç–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã (reflexivos)", "–ü—Ä–æ—à–ª—ã–µ –≤—Ä–µ–º–µ–Ω–∞: Pret√©rito Perfecto", "–ü—Ä–æ—à–ª—ã–µ –≤—Ä–µ–º–µ–Ω–∞: Pret√©rito Indefinido", "–ü—Ä–æ—à–ª—ã–µ –≤—Ä–µ–º–µ–Ω–∞: Pret√©rito Imperfecto", "–í—ã—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å hace / desde / desde hace", "–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö", "–ü—Ä–æ—Å—Ç–æ–µ –±—É–¥—É—â–µ–µ (per√≠frasis ir + a + infinitivo)", "–ù–∞—Å—Ç–æ—è—â–µ–µ —Å–æ—Å–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏–µ (Presente de subjuntivo) –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞—è—Ö", "–ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (lo, la, los, las)", "–ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –∫–æ—Å–≤–µ–Ω–Ω–æ–≥–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (le, les)", "–û—Ç—Ä–∏—Ü–∞–Ω–∏–µ, –¥–≤–æ–π–Ω–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ (no ‚Ä¶ nada / nadie / nunca)", "–í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (qu√©, qui√©n, cu√°ndo, d√≥nde ‚Ä¶ ¬°qu√© ‚Ä¶!)", "–ü—Ä–µ–¥–ª–æ–≥–∏ (en, a, de, por, para –∏ –¥—Ä.)", "–°–æ—é–∑—ã / —Å–≤—è–∑–∫–∏ (y, o, pero, porque, as√≠ que, si –∏ –¥—Ä.)", "–ù–∞—Ä–µ—á–∏—è –º–µ—Å—Ç–∞, –≤—Ä–µ–º–µ–Ω–∏, –º–∞–Ω–µ—Ä—ã (c√≥mo, cu√°ndo, d√≥nde)", "–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ ser vs estar", "–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ por vs para", "–ò–º–ø–µ—Ä–∞—Ç–∏–≤ (t√∫, vosotros / ustedes) –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ—Å—å–±", "–í—ã—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ / –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏: tener que, hay que, deber + infinitivo"
            ]
        },
        b1: {
            words: [
                "comida y bebida", "viajes y transporte", "trabajo y profesiones", "educaci√≥n", "salud y medicina", "clima y estaciones", "tecnolog√≠a e internet", "compras y moda", "familia y relaciones", "ciudad y vivienda", "tiempo libre y hobbies", "finanzas y dinero", "cultura y tradiciones", "medio ambiente", "psicolog√≠a y emociones", "temas sociales", "medios de comunicaci√≥n", "estado y pol√≠tica", "animales y naturaleza", "fiestas y eventos"
            ],
            grammar: [
                "pret√©rito perfecto", "imperfecto", "pluscuamperfecto", "futuro pr√≥ximo", "futuro simple", "condicional", "subjuntivo: deseos, dudas, necesidad", "condicionales tipo 1", "comparativos y superlativos", "pronombres directos e indirectos", "pronombres reflexivos", "pronombres enfatizadores", "pronombres relativos: que, quien, el cual/lo que", "posici√≥n de pronombres con infinitivo, gerundio y mandato afirmativo", "√≥rdenes indirectas con subjuntivo", "ap√≥cope de adjetivos", "adverbios intensificadores: muy, bastante, demasiado", "oraciones complejas con conjunciones y conectores", "preposiciones de lugar y tiempo: en, a, por, para, desde, hasta, durante", "construcciones con lo que y lo cual", "uso de tampoco y ni", "preguntas complejas: c√≥mo, qu√©, por qu√©"
            ]
        },
        b1: {
            words: [
                "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —É—á—ë–±–∞", "–†–∞–±–æ—Ç–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", "–ü–æ–∫—É–ø–∫–∏ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ", "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ", "–ù–∞—É–∫–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–≠–∫–æ–ª–æ–≥–∏—è –∏ –æ–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞", "–û–±—â–µ—Å—Ç–≤–æ –∏ –ø–æ–ª–∏—Ç–∏–∫–∞", "–°–µ–º—å—è –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏", "–ü—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏", "–°–ø–æ—Ä—Ç –∏ –¥–æ—Å—É–≥", "–ú–µ–¥–∏–∞ –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏", "–ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–∏–≥—Ä–∞—Ü–∏—è", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –∏ —ç–º–æ—Ü–∏–∏", "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤—ã–∑–æ–≤—ã", "–ò—Å—Ç–æ—Ä–∏—è –∏ –∫—É–ª—å—Ç—É—Ä–∞ –∏—Å–ø–∞–Ω–æ—è–∑—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –∫–ª–∏–º–∞—Ç", "–ü—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–∏ –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
            ],
            grammar: [
                "–°–ª–æ–∂–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞: Futuro perfecto, Condicional perfecto", "–°–æ—Å–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏–µ: presente de subjuntivo, imperfecto de subjuntivo, pluscuamperfecto de subjuntivo", "–£—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: tipo 2 (imperfecto de subjuntivo + condicional), tipo 3 (pluscuamperfecto de subjuntivo + condicional perfecto)", "–ö–æ—Å–≤–µ–Ω–Ω–∞—è —Ä–µ—á—å (estilo indirecto)", "–ü–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞–ª–æ–≥ (voz pasiva)", "–ì–ª–∞–≥–æ–ª—ã —Å –ø—Ä–µ–¥–ª–æ–≥–∞–º–∏ (verbos + preposici√≥n)", "–ì–ª–∞–≥–æ–ª—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (verbos de cambio)", "–ú–æ–¥–∞–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã (deber, poder, querer) –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏—è—Ö", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 'se' –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö", "–ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö", "–°–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏, –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏ –ø—Ä–∏—á–∏–Ω–Ω—ã–º–∏ –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–º–∏"
            ]
        }
    }
}

const queue = [];

const states = {};

export async function handleTrainer(ctx) {
    const text = `üß° –Ø–∑—ã–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä\n<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫:</b> –ò—Å–ø–∞–Ω—Å–∫–∏–π\n<b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å: </b> B1`
    
    const keyboard = Markup.inlineKeyboard([
        [ Markup.button.callback('‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏', `trainer cards`),
        Markup.button.callback('‚úÖ –§—Ä–∞–∑—ã', `trainers phrases`) ],
        [ Markup.button.callback('‚úÖ –ì–æ–≤–æ—Ä–µ–Ω–∏–µ', `trainers audio`) ],
    ])
    
    await ctx.reply(text, keyboard)
}

const razdely = {
    cards: '–ö–∞—Ä—Ç–æ—á–∫–∏',
    phrases: '–§—Ä–∞–∑—ã',
    audio: '–ì–æ–≤–æ—Ä–µ–Ω–∏–µ',
}

export async function handleTrainerCallback(ctx, args) {
    const keyboard = Markup.inlineKeyboard([
        [ Markup.button.callback(`‚ú® –û–∂–∏–¥–∞–π—Ç–µ!`, `wait`) ],
    ])
    
    await ctx.editMessageText(`‚ú® –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª "${razdely[args[1]]}"`, { ...keyboard })
    states[ctx.from.id] = null;
    
    if (args[1] === 'cards') {
        const response = await queuedRequest(ctx, cardsText)
        
        user.state = {
            type: 'trainer'
        }
        
        if (!user.langs) user.langs = {}
        
        if (!user.langs['es']) {
            user.langs['es'] = {
                level: 'B1',
                words: [],
                themes: []
            }
        }
        
        
    }
    else if (args[1] === 'phrases') {
        const response = await queuedRequest(ctx, phrasesText)
    }
    
}

export async function handleTrainerState(ctx) {
    const text = ctx.text;
    
    if (!text) return ctx.reply(`–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç!`)
    
}

const queuedRequest = async (ctx, prompt) => {
    if(queue.length > 3 || queue.find(x => x.userId === ctx.from.id)) {
        ctx.reply(`<b>–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞!</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,  { parse_mode: 'HTML' })
        return null;
    }
    
    queue.push({ userId: ctx.from.id })
    
    if(queue.length) {
        const { message_id } = await ctx.reply(`<b>–í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏: </b> ${queue.length}`,  { parse_mode: 'HTML' })
        await new Promise(resolve => {
            const interval = setInterval(() => {
                if (queue[0].userId === ctx.from.id) {
                    clearInterval(interval)
                    resolve()
                }
            }, 1000)
        })
        ctx.telegram.deleteMessage(ctx.chat.id, message_id)
    }
    
    const { message_id } = await ctx.reply(`<b>–û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç—Ä–µ–Ω–µ—Ä—É...</b>`, { parse_mode: 'HTML' })
    
    let json;
    
    /* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä */
    const showCpu = () => {
        try {
            ctx.telegram.editMessageText(ctx.from.id, message_id, `<b>–û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç—Ä–µ–Ω–µ—Ä—É...</b>\n–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è CPU: ${getCpuUsage()}%`, { parse_mode: 'HTML' })
        } catch (e) {}
    }
    
    const interval = setInterval(showCpu, 2000)
    
    for(let i = 0; i < 2; i++) {
        try {
            const response = await askOllama(prompt)
            console.log(response)
            json = JSON.parse(response)
        } catch (e) {
            await ctx.reply(`–£–ø—Å! –ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–≤–µ—Ç–∏–ª–∞ —Å –æ—à–∏–±–∫–æ–π (–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞)\n–ï—ë –æ—Ç–≤–µ—Ç: ${response}`)
        }
    }
    
    clearInterval(interval);
    
    if(!json) {
        console.error(e)
        await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç :(`,{ parse_mode: 'HTML' })
        return null;
    }
    
    queue.splice(0, 1);
    return json;
}
