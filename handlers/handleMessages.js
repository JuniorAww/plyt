import { Markup } from 'telegraf'
import { getUser, save as saveUsers, reset as resetUsers } from '../data/users'
import { getChat, getChatById, save as saveChats, reset as resetChats } from '../data/chats'
import { isAdmin } from '../utils/chats'

/* –í—ã–≤–æ–¥ userId –≤ –∫–æ–Ω—Å–æ–ª—å */
let batch = []

setInterval(() => {
    if(!batch.length) return;
    const i = batch.length
    console.log(`> –û–±—Ä–∞–±–æ—Ç–∞–Ω${i>1?'–æ':''} ${i} –∑–∞–ø—Ä–æ—Å${i>4?'–æ–≤':i>1?'–∞':''}\n${batch.join(', ')}`)
    batch = []
}, 5000)

/* –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ */
const spamblock = {}
const latestmsg = {}
const aliveresp = {}

const handleMessages = async (ctx, next) => {
    const { id, username } = ctx.from
    const NOW = Date.now()
    
    const name = username ? ('@'+username) : id
     
    batch.push(name)
    
    //if(!admin[name]) return;
    
    if(spamblock[id] > NOW) return;
    
    if(latestmsg[id] > NOW - 500) {
        spamblock[id] = NOW + 2000
        if(ctx.chat.id < 0) return;
        return await ctx.reply(`üí´ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–∏—à–∏—Ç–µ —Ä–µ–∂–µ ‚ù§Ô∏è</b>\n–¢–∞–∫ –≤—ã —Å–Ω–∏–∂–∞–µ—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –±–æ—Ç–∞`, { parse_mode: 'HTML' })
    }
    
    latestmsg[id] = NOW
    
    ctx.reply = (text, params) => ctx.sendMessage(text, { parse_mode: 'HTML', ...params })
    
    if(ctx.message.date < (NOW / 1000 - 5)) {
        if(aliveresp[ctx.from.id]) return;
        aliveresp[ctx.from.id] = true;
        if(ctx.chat.id < 0) return;
        return await ctx.reply(`üí´ <b>–ë–æ—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!</b>`)
    }
    
    ctx.user = await getUser(ctx).catch(async e => {
        console.error(e)
        if(ctx.chat.id > 0) await ctx.reply(`üí´ <b>–£–ø—Å! –ò—Å–ø—ã—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã.</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º`)
        return null
    })

    if(ctx.chat.id < 0) {
        /* –ì—Ä—É–ø–ø–∞ */
        ctx.info = await getChat(ctx)
        if(ctx.text === '/link') return handleLink(ctx)
    }
    else {
        if(ctx.from.id === 1067953223) {
            if(ctx.text === '/reset') {
                resetUsers(); resetChats(); return;
            }
        }
        /* –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è */
        const state = ctx.user.state
        if(state) {
            if(state.essay) {
                const text = ctx.text
                if (!text) return await ctx.reply(`üí• <b>–£–ø—Å!</b>\n–ê–Ω–∫–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞.`)
                if (text.length < 4 || text.length > 100) return await ctx.reply(`üí• <b>–£–ø—Å!</b>\n–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –≤–ø–∏—Å–∞–ª–∞—Å—å –≤ —Ä–∞–º–∫–∏ –æ—Ç 4 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!`)
                
                const seconds = Math.floor(Date.now() / 1000)
                
                delete ctx.user['state']
                const nextLimit = seconds + 600;
                if (!ctx.user.limits) ctx.user.limits = { essays: [ state.chatId ], essay: nextLimit }
                else {
                    if (!ctx.user.limits.essays) ctx.user.limits.essays = [ state.chatId ]
                    else ctx.user.limits.essays.push(state.chatId)
                    ctx.user.limits.essay = nextLimit
                }
                
                saveUsers();
                
                const chat = await getChatById(+state.chatId)
                if (!chat) {
                    return await ctx.reply(`üí• <b>–£–ø—Å!</b>\n–ß–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤—Å—Ç—É–ø–∏—Ç—å, —É–¥–∞–ª–µ–Ω!`)
                }
                
                const essay = {
                    from: ctx.from,
                    text,
                    checked: false,
                    votes: {},
                    date: seconds
                };
                if (!chat.essays) chat.essays = []
                chat.essays.push(essay)
                
                const index = chat.essays.indexOf(essay);
                const chatId = (chat.id + "").slice(1);
                
                saveChats();
                
                const url = `https://t.me/plytbot?start=0${chatId}-${index}`
                
                const req = `üß° <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ</b>\n–ê–≤—Ç–æ—Ä: <i>${ctx.from.first_name}</i>\n<a href="${url}">–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∞–Ω–∫–µ—Ç—É</a>`
                
                const keyboard = Markup.inlineKeyboard([
                    [ Markup.button.callback('‚úÖ –ó–∞ | 0', `vote ${chatId} essay ${index} 1`),
                    Markup.button.callback('‚ùå –ü—Ä–æ—Ç–∏–≤ | 0', `vote ${chatId} essay ${index} 0`) ],
                ])
                
                ctx.telegram.sendMessage(chat.id, req, { parse_mode: 'HTML', ...keyboard })
                
                const res = `‚úÖ <b>–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n–¢–µ–ø–µ—Ä—å - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–æ–≤.`
                return await ctx.reply(res)
            }
        }
    }
    
    next() 
}

const handleLink = async ctx => {
    if(!await isAdmin(ctx)) return ctx.reply(`–¢—ã –Ω–µ –∞–¥–º–∏–Ω —Å—É–∫.`)
    
    const url = "https://t.me/plytbot?start=" + ctx.info.id
    
    ctx.info.linkEnabled = true;
    
    return ctx.reply(`üí¶ <b><a href="${url}">–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç</a></b>\n–ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–∫–µ—Ç—ã!`)
}

export default handleMessages
