import { Markup } from 'telegraf'
import Module from '../module.js'

class StartModule extends Module {
    description = "–¢–∏–ø–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ /start"
    priority = 100
    
    async onStart(ctx, next) {
        if (!startStickers.values) await retrieveStickers(ctx)
        
        await ctx.reply(`üçÑ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b>\n–Ø - –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –±–æ—Ç, –ø–æ–ª–µ–∑–Ω—ã–π –¥–ª—è —á–∞—Ç–æ–≤ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ. <i>–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?</i>`, startKeyboard());
        
        if (startStickers.values) await ctx.sendSticker(pickSticker())
    }
}

const startStickers = { values: null, retrieving: false }

const startKeyboard = () => Markup.inlineKeyboard([
    [ Markup.button.callback('üí´ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'menu me') ],
    [ Markup.button.callback('üåü –Ø–∑—ã–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–µ—Ä', 'menu trainer') ],
])

/* –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ: —Å—Ç–∏–∫–µ—Ä—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ /start */
const pickSticker = () => startStickers.values[Math.floor(Math.random() * startStickers.values.length)];

const retrieveStickers = async ctx => {
    if (!startStickers.retrieving) {
        startStickers.retrieving = true;
        const set = await ctx.telegram.getStickerSet('ImFoxFennec')
        startStickers.values = set.stickers.map(sticker => sticker.file_id)
        startStickers.retrieving = false;
    }
}

export default StartModule
