import { Markup } from 'telegraf'
import Module from '../module.js'
import { chats, users } from '../utils/data.js'
import { getMember, isAdmin } from '../utils/chats.js'
import handleCallback from './forms-cb.jsx'

class FormsModule extends Module {
    description = "–ó–∞—è–≤–∫–∏ (–∞–Ω–∫–µ—Ç—ã) –≤ —á–∞—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º"
    priority = 55
    
    async onMessage(ctx, next) {
        const text = ctx.text;
        const user = await ctx.getUser()
        
        if (text) {
            if (text === '/link') return await sendFormLink(ctx)
        }
        
        const { state } = user;
        if (state) {
            if (state.type === 'invite') return await handleFormText(ctx, user);
            else if (state.type === 'decline') return await handleFormDecline(ctx, user);
        }
        
        next()
    }
    
    async onStart(ctx, next) {
        const payload = ctx.text.slice(7)
        if (payload[0] === '-') return await handleChatInviteLink(ctx, payload);
        else if (payload[0] === '0') return await handleSendEssay(ctx, payload);
        next();
    }
    
    onCallback(ctx, next) {
        return handleCallback(ctx, next)
    }
    
    onJoinRequest(ctx) {
        return handleJoinRequest(ctx)
    }
}

/* ============= */
/* –ö–æ–º–∞–Ω–¥–∞ /link */
/* ============= */
async function sendFormLink(ctx) {
    if (ctx.chat.id > 0) return await ctx.reply("–ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —á–∞—Ç–∞—Ö")
    
    const chat = await ctx.getInfo()
    chat.linkEnabled = true;
    console.log(chat)
    
    const url = "https://t.me/plytbot?start=" + ctx.chat.id
    return ctx.reply(`üí¶ <b><a href="${url}">–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç</a></b>`
                  + `\n–ü–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è <b>–∞–Ω–∫–µ—Ç—ã</b> –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞ ${ctx.chat.title}`)
}

/* ===================================== */
/* –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ */
/* ===================================== */
const handleChatInviteLink = async (ctx, payload) => {
    const chat = await chats.getChatById(+payload) // number
    const user = await ctx.getUser();
    console.log(chat)
    if (!chat) return await ctx.reply(messages['missing_group'])
    if (!chat.linkEnabled) return await ctx.reply(messages['links_disabled'])
    
    if (user.limits?.essay && user.limits.essay > Date.now() / 1000) return await ctx.reply(messages['essay_timelimit'])
    if (user.limits?.essays?.find(chatId => chatId === chat.id)) return await ctx.reply(messages['already_sent'])

    user.state = {
        type: 'invite',
        essay: 1,
        chatId: chat.id
    }

    await ctx.reply(messages['essay_start'], essay_keyboard)
}

const essay_keyboard = Markup.inlineKeyboard([
    [ Markup.button.callback('üí• –û—Ç–º–µ–Ω–∏—Ç—å', 'cancel essay') ],
])

/* ===================================== */
/* –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É" */
/* ===================================== */
const handleSendEssay = async (ctx, payload) => {
    const args = payload.slice(1).split('-')
    if(args.length !== 2) return;
    
    const chatId = -args[0];
    const essayId = +args[1];
    
    const chat = await chats.getChatById(chatId)
    if (!chat) return;
    
    if (!await getMember(ctx, chatId)) return await ctx.reply(messages['not_member'])
    
    const essay = chat.essays?.[+essayId]
    if(!essay) return await ctx.reply(messages['no_essay'])
    
    const admin = await isAdmin(ctx, chatId);
    const keyboard = admin ? Markup.inlineKeyboard([
        [ Markup.button.callback('üíö –ü—Ä–∏–Ω—è—Ç—å', `essay ${chatId} ${essayId} accept`) ],
        [ Markup.button.callback('üí• –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `essay ${chatId} ${essayId} decline`) ],
    ]) : {}
      
    const tag = !admin ? "" : essay.from.username ? ` (@${essay.from.username})` : ` (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ç—ç–≥–∞)`
    
    return await ctx.reply(`üß° <b>–ê–Ω–∫–µ—Ç–∞ –æ—Ç ${essay.from.first_name}</b>${tag}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ‚Üì\n${essay.text}`, { ...keyboard })
}

/* meow meow meow meow meow meow meow meow */
const messages = {
    missing_group: `üí• <b>–£–ø—Å!</b>\n–ì—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤—Å—Ç—É–ø–∏—Ç—å, —É–¥–∞–ª–µ–Ω–∞.`,
    links_disabled: `üí• <b>–£–ø—Å!</b>\n–ì—Ä—É–ø–ø–∞, –≤ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤—Å—Ç—É–ø–∏—Ç—å, –æ—Ç–∫–ª—é—á–∏–ª–∞ –∞–Ω–∫–µ—Ç—ã.`,
    already_sent: `üí• <b>–£–ø—Å!</b>\n–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∞–Ω–∫–µ—Ç—É –≤ –¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É.`,
    essay_timelimit: `üí• <b>–£–ø—Å!</b>\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É.`,
    not_member: `üí• <b>–£–ø—Å!</b>\n–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ.`,
    no_essay: `üí• <b>–£–ø—Å!</b>\n–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`,
    essay_start: `üí´ <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b>\n–Ø –Ω–∞—à–µ–ª –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.\n–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è —Ç–µ–±–µ –Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª–∏–Ω–æ–π –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤!\n–û–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∞–º–∏. –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º!`,
}

/* =========================== */
/* –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞—è–≤–æ–∫ */
/* =========================== */
async function handleFormText(ctx, user) {
    const { text } = ctx;
    
    if (!text) return await ctx.reply(`üí• <b>–£–ø—Å!</b>\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è / –≤–∏–¥–µ–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è`)
    const len = text.length;
    
    if (len > 500 || len < 4) return await ctx.reply(`üí• <b>–£–ø—Å!</b>\n–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –≤–ø–∏—Å–∞–ª–∞—Å—å –≤ —Ä–∞–º–∫–∏ –æ—Ç 4 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!`)
    
    if (text.match(/^\//)) return await ctx.reply(`üí• –•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã –≤ —á–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"`)
    
    const { state } = user;
    delete user['state']
    
    const seconds = Math.floor(Date.now() / 1000)
    const nextLimit = seconds + 600;
    if (!user.limits) user.limits = { essays: [ state.chatId ], essay: nextLimit }
    else {
        if (!user.limits.essays) user.limits.essays = [ state.chatId ]
        else user.limits.essays.push(state.chatId)
        user.limits.essay = nextLimit
    }
    
    const chat = await chats.getChatById(state.chatId)
    if (!chat) {
        return await ctx.reply(`üí• <b>–£–ø—Å!</b>\n–ß–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤—Å—Ç—É–ø–∏—Ç—å, —É–¥–∞–ª–µ–Ω!`)
    }
    
    const essay = {
        from: ctx.from,
        text,
        state: 0,
        votes: {},
        date: seconds
    };
    if (!chat.essays) chat.essays = []
    chat.essays.push(essay)
    
    const index = chat.essays.indexOf(essay);
    
    const url = `https://t.me/plytbot?start=0${(chat.id + "").slice(1)}-${index}`
    console.log(url, chat.id)
    
    const req = `üß° <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ</b>\n–ê–≤—Ç–æ—Ä: <i>${ctx.from.first_name}</i>\n<a href="${url}">–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∞–Ω–∫–µ—Ç—É</a>`
    
    const keyboard = Markup.inlineKeyboard([
        [ Markup.button.callback('‚úÖ –ó–∞ | 0', `vote ${chat.id} essay ${index} 1`),
        Markup.button.callback('‚ùå –ü—Ä–æ—Ç–∏–≤ | 0', `vote ${chat.id} essay ${index} 0`) ],
    ])
    
    const { message_id } = await ctx.telegram.sendMessage(state.chatId, req, { parse_mode: 'HTML', ...keyboard })
    essay.voting_msg = message_id;
    
    const res = `‚úÖ <b>–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n–¢–µ–ø–µ—Ä—å - –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–æ–≤.`
    return await ctx.reply(res)
}

/* =================================== */
/* –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–∞–∑ –∞–¥–º–∏–Ω–∞ –ø–æ –∑–∞—è–≤–∫–µ */
/* =================================== */
async function handleFormDecline(ctx, user) {
    const { text } = ctx;
    
    if (!text) return await ctx.reply(`üí• <b>–£–ø—Å!</b>\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è / –≤–∏–¥–µ–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è`)
    const len = text.length;
    
    if (len > 500 || len < 4) return await ctx.reply(`üí• <b>–£–ø—Å!</b>\n–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –≤–ø–∏—Å–∞–ª–∞—Å—å –≤ —Ä–∞–º–∫–∏ –æ—Ç 4 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!`)
    
    const { state } = user;
    const chat = await chats.getChatById(state.chatId)
    if (!chat) return;
    
    const essay = chat.essays[+state.essayId]
    if (!essay || essay.state !== 2) return;
    
    user.state.canc_reason = text;
    
    const keyboard = Markup.inlineKeyboard([
        [ Markup.button.callback('‚úÖ –î–∞', `essay ${chat.id} ${state.essayId} fin_dec`),
        Markup.button.callback('‚õî –î–∞, –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `essay ${chat.id} ${state.essayId} fin_dec block`) ],
        [ Markup.button.callback('üîô –û—Ç–º–µ–Ω–∏—Ç—å', `essay ${chat.id} ${state.essayId} cancel`) ],
    ])
    
    const mtext = `‚òë <b>–¢–µ–∫—Å—Ç:</b> ${text}\n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?`
    
    return await ctx.reply(mtext, keyboard)
}

/* =================================================== */
/* –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É –ø–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º */
/* =================================================== */
async function handleJoinRequest(ctx) {
    const req = ctx.chatJoinRequest;
    const user = req.from;
    const { id: chatId } = req.chat;
    const { invite_link, is_revoked, creator } = req.invite_link || {};
    
    const chat = await chats.getChatById(chatId);
    console.log(chat)
    
    if (!chat) return;
    
    const invite_entry = chat.invited?.[invite_link]
    
    if (!inviteEntry) return console.warn("No invite entry found for " + user);
    if (is_revoked) return console.warn("Revoked invite used by " + user);
    
    if (invite_entry.userId !== user.id) {
        await ctx.declineChatJoinRequest(user.id);
        const userEntry = await users.getUserById(invite_entry.userId);
        const name = (userEntry?.name) || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ";
        const warn = `–ü–æ —Å—Å—ã–ª–∫–µ –¥–ª—è ${name} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ —á—É–∂–∞–∫ `
                   + `${user.first_name}${user.last_name ? (" " + user.last_name) : ""} `
                   + `(ID ${user.id}${user.username ? " @" + user.username : ""})`;
        await ctx.sendMessage(warn)
    }
    else {
        await ctx.approveChatJoinRequest(user.id);
        await ctx.telegram.revokeChatInviteLink(
            ctx.chat.id,
            invite_link
        );
        delete chat.invited[invite_link];
    }
}


export default FormsModule
